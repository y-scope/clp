#!/usr/bin/env python3
import argparse
import logging
import os
import pathlib
import subprocess
import sys
import uuid

# Setup logging
# Create logger
logger = logging.getLogger(__file__)
logger.setLevel(logging.INFO)
# Setup console logging
logging_console_handler = logging.StreamHandler()
logging_formatter = logging.Formatter("%(asctime)s [%(levelname)s] [%(name)s] %(message)s")
logging_console_handler.setFormatter(logging_formatter)
logger.addHandler(logging_console_handler)


def get_clp_home():
    # Determine CLP_HOME from an environment variable or this script's path
    _clp_home = None
    if 'CLP_HOME' in os.environ:
        _clp_home = pathlib.Path(os.environ['CLP_HOME'])
    else:
        for path in pathlib.Path(__file__).resolve().parents:
            if 'sbin' == path.name:
                _clp_home = path.parent
                break

    if _clp_home is None:
        logger.error("CLP_HOME is not set and could not be determined automatically.")
        return None
    elif not _clp_home.exists():
        logger.error("CLP_HOME set to nonexistent path.")
        return None

    return _clp_home.resolve()


def load_bundled_python_lib_path(_clp_home):
    python_site_packages_path = _clp_home / 'lib' / 'python3' / 'site-packages'
    if not python_site_packages_path.is_dir():
        logger.error("Failed to load python3 packages bundled with CLP.")
        return False

    # Add packages to the front of the path
    sys.path.insert(0, str(python_site_packages_path))

    return True


clp_home = get_clp_home()
if clp_home is None or not load_bundled_python_lib_path(clp_home):
    sys.exit(-1)

import yaml
from clp.package_utils import CLP_DEFAULT_CONFIG_FILE_RELATIVE_PATH, validate_and_load_config_file


def main(argv):
    default_config_file_path = clp_home / CLP_DEFAULT_CONFIG_FILE_RELATIVE_PATH

    args_parser = argparse.ArgumentParser(description="Searches the compressed logs.")
    args_parser.add_argument('--config', '-c', required=True, help="CLP configuration file.")
    args_parser.add_argument('wildcard_query', help="Wildcard query.")
    args_parser.add_argument('--file-path', help="File to search.")
    parsed_args = args_parser.parse_args(argv[1:])

    # Validate and load config file
    try:
        config_file_path = pathlib.Path(parsed_args.config)
        clp_config = validate_and_load_config_file(config_file_path, default_config_file_path, clp_home)
        clp_config.validate_logs_dir()
    except:
        logger.exception("Failed to load config.")
        return -1

    # Generate database config file for clp
    db_config_file_path = clp_config.logs_directory / f'decompress-db-config-{uuid.uuid4()}.yml'
    db_config_file = open(db_config_file_path, 'w')
    yaml.safe_dump(clp_config.database.get_clp_connection_params_and_type(True), db_config_file)
    db_config_file.close()

    cmd = [
        str(clp_home / 'bin' / 'clg'),
        str(clp_config.archive_output.directory), parsed_args.wildcard_query,
        '--db-config-file', str(db_config_file_path),
    ]
    if parsed_args.file_path is not None:
        cmd.append(parsed_args.file_path)

    proc = subprocess.Popen(cmd)
    return_code = proc.wait()
    if 0 != return_code:
        logger.error(f"Search failed, return_code={return_code}")
        return return_code

    # Remove generated files
    db_config_file_path.unlink()

    return return_code


if '__main__' == __name__:
    sys.exit(main(sys.argv))
