#!/usr/bin/env python3
import argparse
import logging
import os
import pathlib
import subprocess
import sys

# Setup logging
# Create logger
logger = logging.getLogger('clp')
logger.setLevel(logging.INFO)
# Setup console logging
logging_console_handler = logging.StreamHandler()
logging_formatter = logging.Formatter('%(asctime)s [%(levelname)s] [%(name)s] %(message)s')
logging_console_handler.setFormatter(logging_formatter)
logger.addHandler(logging_console_handler)


def get_clp_home():
    clp_home = None
    if 'CLP_HOME' in os.environ:
        clp_home = pathlib.Path(os.environ['CLP_HOME'])
    else:
        for path in pathlib.Path(__file__).resolve().parents:
            if 'sbin' == path.name:
                clp_home = path.parent
                break

    if clp_home is None:
        logger.error('CLP_HOME is not set and could not be determined automatically.')
        return None
    elif not clp_home.exists():
        logger.error('CLP_HOME does not exist.')
        return None

    return clp_home.resolve()


def load_bundled_python_lib_path(clp_home):
    python_site_packages_path = clp_home / 'lib' / 'python3' / 'site-packages'
    if not python_site_packages_path.is_dir():
        logger.error('Failed to load python3 packages bundled with CLP.')
        return -1
    # Add packages to the front of the path
    sys.path.insert(0, str(python_site_packages_path))


clp_home = get_clp_home()
if clp_home is None:
    sys.exit(-1)
load_bundled_python_lib_path(clp_home)

from clp.package_utils import \
    container_exists, \
    make_config_path_absolute, \
    validate_or_generate_config_file


def stop_container(container_name: str):
    if not container_exists(container_name):
        return

    logger.info(f'Stopping {container_name}...')
    cmd = ['docker', 'stop', container_name]
    subprocess.run(cmd, stdout=subprocess.DEVNULL, check=True)
    logger.info(f'Stopped {container_name}.')


def main(argv):
    default_config_file_path = clp_home / 'etc' / 'clp-config.yaml'

    args_parser = argparse.ArgumentParser(description='Stops CLP')
    args_parser.add_argument('--config', '-c', default=str(default_config_file_path),
                             help='CLP package configuration file.')

    component_args_parser = args_parser.add_subparsers(dest='component_name')
    component_args_parser.add_parser('db')
    component_args_parser.add_parser('queue')
    component_args_parser.add_parser('scheduler')
    component_args_parser.add_parser('worker')

    parsed_args = args_parser.parse_args(argv[1:])

    # Validate config file
    config_file_path = pathlib.Path(parsed_args.config)
    clp_config = validate_or_generate_config_file(config_file_path, default_config_file_path)
    if clp_config is None:
        return -1

    if parsed_args.component_name:
        component_name = parsed_args.component_name
    else:
        component_name = ""

    try:
        # Read instance ID from file
        logs_dir = make_config_path_absolute(clp_home, clp_config.logs_directory)
        instance_id_file_path = logs_dir / 'instance-id'
        if not (logs_dir.exists() and logs_dir.is_dir() and instance_id_file_path.exists()):
            # No instance ID file, so nothing to do
            return 0
        with open(instance_id_file_path, 'r') as f:
            instance_id = f.readline()

        if "" == component_name or "worker" == component_name:
            stop_container(f'clp-worker-{instance_id}')
        if "" == component_name or "scheduler" == component_name:
            stop_container(f'clp-scheduler-{instance_id}')

            container_config_file_path = clp_home / 'etc' / '.clp-scheduler-config.yaml'
            if container_config_file_path.exists():
                container_config_file_path.unlink()
        if "" == component_name or "queue" == component_name:
            stop_container(f'clp-queue-{instance_id}')
        if "" == component_name or "db" == component_name:
            stop_container(f'clp-db-{instance_id}')

        if "" == component_name:
            # NOTE: We can only remove the instance ID file if all containers have been stopped.
            # Currently, we only remove the instance file when all containers are stopped at once.
            # If a single container is stopped, it's expensive to check if the others are running,
            # so instead we don't remove the instance file. In the worst case, a user will have to
            # remove it manually.
            instance_id_file_path.unlink()
    except:
        logger.exception('Failed to stop CLP.')
        return -1

    return 0


if '__main__' == __name__:
    sys.exit(main(sys.argv))
