#!/usr/bin/env python3
import argparse
import logging
import os
import pathlib
import subprocess
import sys
import uuid

# Setup logging
# Create logger
logger = logging.getLogger(__file__)
logger.setLevel(logging.INFO)
# Setup console logging
logging_console_handler = logging.StreamHandler()
logging_formatter = logging.Formatter("%(asctime)s [%(levelname)s] [%(name)s] %(message)s")
logging_console_handler.setFormatter(logging_formatter)
logger.addHandler(logging_console_handler)


def get_clp_home():
    # Determine CLP_HOME from an environment variable or this script's path
    _clp_home = None
    if 'CLP_HOME' in os.environ:
        _clp_home = pathlib.Path(os.environ['CLP_HOME'])
    else:
        for path in pathlib.Path(__file__).resolve().parents:
            if 'sbin' == path.name:
                _clp_home = path.parent
                break

    if _clp_home is None:
        logger.error("CLP_HOME is not set and could not be determined automatically.")
        return None
    elif not _clp_home.exists():
        logger.error("CLP_HOME set to nonexistent path.")
        return None

    return _clp_home.resolve()


def load_bundled_python_lib_path(_clp_home):
    python_site_packages_path = _clp_home / 'lib' / 'python3' / 'site-packages'
    if not python_site_packages_path.is_dir():
        logger.error("Failed to load python3 packages bundled with CLP.")
        return False

    # Add packages to the front of the path
    sys.path.insert(0, str(python_site_packages_path))

    return True


clp_home = get_clp_home()
if clp_home is None or not load_bundled_python_lib_path(clp_home):
    sys.exit(-1)

import yaml
from clp.package_utils import \
    CLP_DEFAULT_CONFIG_FILE_RELATIVE_PATH, \
    CONTAINER_CLP_HOME, \
    CONTAINER_INPUT_LOGS_ROOT_DIR, \
    generate_container_config, \
    validate_and_load_config_file, \
    validate_and_load_db_credentials_file

def main(argv):
    default_config_file_path = clp_home / CLP_DEFAULT_CONFIG_FILE_RELATIVE_PATH

    args_parser = argparse.ArgumentParser(description="Compresses files/directories")
    args_parser.add_argument('--config', '-c', default=str(default_config_file_path),
                             help="CLP package configuration file.")
    args_parser.add_argument('paths', metavar='PATH', nargs='*', help="Paths to compress.")
    args_parser.add_argument('-f', '--input-list', dest='input_list', help="A file listing all paths to compress.")

    parsed_args = args_parser.parse_args(argv[1:])

    # Validate and load config file
    try:
        config_file_path = pathlib.Path(parsed_args.config)
        clp_config = validate_and_load_config_file(config_file_path, default_config_file_path, clp_home)
        clp_config.validate_logs_dir()

        validate_and_load_db_credentials_file(clp_config, clp_home, False)
    except:
        logger.exception("Failed to load config.")
        return -1

    container_name = f'clp-compressor-{str(uuid.uuid4())[-4:]}'

    container_clp_config, mounts = generate_container_config(clp_config, clp_home)
    container_config_filename = f'.{container_name}-config.yml'
    container_config_file_path_on_host = clp_config.logs_directory / container_config_filename
    with open(container_config_file_path_on_host, 'w') as f:
        yaml.safe_dump(container_clp_config.dump_to_primitive_dict(), f)

    container_start_cmd = [
        'docker', 'run',
        '-i',
        '--rm',
        '--network', 'host',
        '-w', str(CONTAINER_CLP_HOME),
        '-u', f'{os.getuid()}:{os.getgid()}',
        '--name', container_name,
        '--mount', str(mounts.clp_home),
    ]
    necessary_mounts = [
        mounts.input_logs_dir,
        mounts.data_dir,
        mounts.logs_dir,
        mounts.archives_output_dir
    ]
    for mount in necessary_mounts:
        if mount:
            container_start_cmd.append('--mount')
            container_start_cmd.append(str(mount))
    container_start_cmd.append(clp_config.execution_container)

    compress_cmd = [
        str(CONTAINER_CLP_HOME / 'sbin' / 'native' / 'compress'),
        '--config', str(container_clp_config.logs_directory / container_config_filename),
        '--remove-path-prefix', str(CONTAINER_INPUT_LOGS_ROOT_DIR)
    ]
    for path in parsed_args.paths:
        # Resolve path and prefix it with CONTAINER_INPUT_LOGS_ROOT_DIR
        resolved_path = pathlib.Path(path).resolve()
        path = str(CONTAINER_INPUT_LOGS_ROOT_DIR / resolved_path.relative_to(resolved_path.anchor))
        compress_cmd.append(path)
    if parsed_args.input_list is not None:
        # Get unused output path
        while True:
            output_list_filename = f'{uuid.uuid4()}.txt'
            output_list_path = clp_config.logs_directory / output_list_filename
            if not output_list_path.exists():
                break

        try:
            with open(output_list_path, 'w') as output_list:
                # Validate all paths in input list
                all_paths_valid = True
                with open(parsed_args.input_list, 'r') as f:
                    for line in f:
                        resolved_path = pathlib.Path(line.rstrip()).resolve()
                        if not resolved_path.is_absolute():
                            logger.error(f"Invalid relative path in input list: {resolved_path}")
                            all_paths_valid = False
                        path = CONTAINER_INPUT_LOGS_ROOT_DIR / resolved_path.relative_to(resolved_path.anchor)
                        output_list.write(f'{path}\n')
                if not all_paths_valid:
                    raise ValueError("--input-list must only contain absolute paths")
        finally:
            output_list_path.unlink()

        compress_cmd.append('--input-list')
        compress_cmd.append(container_clp_config.logs_directory / output_list_filename)

    cmd = container_start_cmd + compress_cmd
    subprocess.run(cmd, check=True)

    # Remove generated files
    container_config_file_path_on_host.unlink()

    return 0


if '__main__' == __name__:
    sys.exit(main(sys.argv))
