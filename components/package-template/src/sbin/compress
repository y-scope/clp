#!/usr/bin/env python3
import argparse
import logging
import os
import pathlib
import subprocess
import sys

# Setup logging
# Create logger
import uuid

log = logging.getLogger('clp')
log.setLevel(logging.INFO)
# Setup console logging
logging_console_handler = logging.StreamHandler()
logging_formatter = logging.Formatter('%(asctime)s [%(levelname)s] [%(name)s] %(message)s')
logging_console_handler.setFormatter(logging_formatter)
log.addHandler(logging_console_handler)


def get_clp_home():
    clp_home = None
    if 'CLP_HOME' in os.environ:
        clp_home = pathlib.Path(os.environ['CLP_HOME'])
    else:
        for path in pathlib.Path(__file__).resolve().parents:
            if 'sbin' == path.name:
                clp_home = path.parent
                break

    if clp_home is None:
        log.error('CLP_HOME is not set and could not be determined automatically.')
        return None
    elif not clp_home.exists():
        log.error('CLP_HOME does not exist.')
        return None

    return clp_home.resolve()


def load_bundled_python_lib_path(clp_home):
    python_site_packages_path = clp_home / 'lib' / 'python3' / 'site-packages'
    if not python_site_packages_path.is_dir():
        log.error('Failed to load python3 packages bundled with CLP.')
        return -1
    # Add packages to the front of the path
    sys.path.insert(0, str(python_site_packages_path))


clp_home = get_clp_home()
if clp_home is None:
    sys.exit(-1)
load_bundled_python_lib_path(clp_home)

from clp.package_utils import \
    CONTAINER_CLP_INSTALL_PREFIX, \
    generate_container_config, \
    validate_or_generate_config_file


def main(argv):
    default_config_file_path = clp_home / 'etc' / 'clp-config.yaml'

    args_parser = argparse.ArgumentParser(description='Compresses files/directories')
    args_parser.add_argument('--config', '-c', default=str(default_config_file_path),
                             help='CLP package configuration file.')
    args_parser.add_argument('paths', metavar='PATH', nargs='*', help='Paths to compress.')
    args_parser.add_argument('-f', '--input-list', dest='input_list', help='A file listing all paths to compress.')

    parsed_args = args_parser.parse_args(argv[1:])

    # Validate config file
    config_file_path = pathlib.Path(parsed_args.config)
    clp_config = validate_or_generate_config_file(config_file_path, default_config_file_path)
    if clp_config is None:
        return -1

    container_name = f'clp-compressor-{str(uuid.uuid4())[-4:]}'

    container_clp_config, mounts = generate_container_config(clp_config, clp_home)
    container_config_filename = f'.{container_name}-config.yaml'
    container_config_file_path = clp_home / 'etc' / container_config_filename
    with open(container_config_file_path, 'w') as f:
        f.write(container_clp_config.generate_config_file_content_with_comments())

    docker_clp_home = pathlib.Path(CONTAINER_CLP_INSTALL_PREFIX) / 'clp'
    container_start_cmd = [
        'docker', 'run',
        '-i',
        '--rm',
        '--network', 'host',
        '-w', str(docker_clp_home),
        '-u', f'{os.getuid()}:{os.getgid()}',
        '--name', container_name,
    ]
    for mount in mounts:
        container_start_cmd.append('--mount')
        container_start_cmd.append(str(mount))
    container_start_cmd.append('ghcr.io/y-scope/clp/clp-execution-x86-ubuntu-focal:main')
    compress_cmd = [
        str(docker_clp_home / 'sbin' / 'native' / 'compress'),
        '--config', str(docker_clp_home / 'etc' / container_config_filename)
    ]
    container_input_logs_path = pathlib.Path('/') / 'mnt' / 'logs'
    for path in parsed_args.paths:
        # Resolve path and prefix it with container_input_logs_path
        resolved_path = pathlib.Path(path).resolve()
        path = str(container_input_logs_path / resolved_path.relative_to(resolved_path.anchor))
        compress_cmd.append(path)
    if parsed_args.input_list is not None:
        # TODO Paths need to be prefixed with /mnt/logs
        # Validate all paths in input list
        all_paths_valid = True
        with open(parsed_args.input_list, 'r') as f:
            for line in f:
                path = pathlib.Path(line.rstrip())
                if not path.is_absolute():
                    log.error(f'Invalid relative path in input list: {path}')
                    all_paths_valid = False
        if not all_paths_valid:
            raise ValueError("--input-list must only contain absolute paths")

        compress_cmd.append('--input-list')
        compress_cmd.append(parsed_args.input_list)
    cmd = container_start_cmd + compress_cmd
    subprocess.run(cmd, check=True)

    container_config_file_path.unlink()

    return 0


if '__main__' == __name__:
    sys.exit(main(sys.argv))
