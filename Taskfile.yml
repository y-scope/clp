version: "3"

includes:
  docs: "docs/tasks.yml"
  lint: "lint-tasks.yml"

vars:
  # Paths
  G_BUILD_DIR: "{{.ROOT_DIR}}/build"
  G_CORE_COMPONENT_BUILD_DIR: "{{.G_BUILD_DIR}}/core"
  G_METEOR_BUILD_DIR: "{{.G_BUILD_DIR}}/meteor"
  G_PACKAGE_BUILD_DIR: "{{.G_BUILD_DIR}}/clp-package"
  G_PACKAGE_VENV_DIR: "{{.G_BUILD_DIR}}/package-venv"
  G_WEBUI_BUILD_DIR: "{{.G_BUILD_DIR}}/webui"
  G_WEBUI_NODEJS_BUILD_DIR: "{{.G_BUILD_DIR}}/webui-nodejs"
  G_WEBUI_NODEJS_BIN_DIR: "{{.G_WEBUI_NODEJS_BUILD_DIR}}/bin"

  # Versions
  G_PACKAGE_VERSION: "0.2.0-dev"

tasks:
  default:
    deps: ["package"]

  clean:
    cmds:
      - "rm -rf '{{.G_BUILD_DIR}}'"
      - task: "clean-python-component"
        vars:
          COMPONENT: "clp-package-utils"
      - task: "clean-python-component"
        vars:
          COMPONENT: "clp-py-utils"
      - task: "clean-python-component"
        vars:
          COMPONENT: "job-orchestration"

  clp-json-pkg-tar:
    cmds:
      - task: "package-tar"
        vars:
          FLAVOUR: "json"
          STORAGE_ENGINE: "clp-s"

  clp-text-pkg-tar:
    cmds:
      - task: "package-tar"
        vars:
          FLAVOUR: "text"
          STORAGE_ENGINE: "clp"

  package:
    vars:
      CHECKSUM_FILE: "{{.G_BUILD_DIR}}/{{.TASK}}.md5"
      OUTPUT_DIR: "{{.G_PACKAGE_BUILD_DIR}}"
    deps:
      - "core"
      - "clp-package-utils"
      - "clp-py-utils"
      - "init"
      - "job-orchestration"
      - "package-venv"
      - task: "validate-checksum"
        vars:
          CHECKSUM_FILE: "{{.CHECKSUM_FILE}}"
          DATA_DIR: "{{.OUTPUT_DIR}}"
      - "webui"
      - "webui-nodejs"
    cmds:
      - "rm -rf '{{.OUTPUT_DIR}}'"
      - "rsync -a components/package-template/src/ '{{.OUTPUT_DIR}}'"
      - "rsync --copy-links /etc/os-release '{{.OUTPUT_DIR}}/etc/os-release'"
      - "mkdir -p '{{.OUTPUT_DIR}}/lib/python3/site-packages'"
      - |-
        . "{{.G_PACKAGE_VENV_DIR}}/bin/activate"
        pip3 install --upgrade \
          components/clp-package-utils/dist/*.whl \
          components/clp-py-utils/dist/*.whl \
          components/job-orchestration/dist/*.whl \
          -t "{{.OUTPUT_DIR}}/lib/python3/site-packages"
      - "mkdir -p '{{.OUTPUT_DIR}}/bin'"
      - >-
        rsync -a
        "{{.G_CORE_COMPONENT_BUILD_DIR}}/clg"
        "{{.G_CORE_COMPONENT_BUILD_DIR}}/clo"
        "{{.G_CORE_COMPONENT_BUILD_DIR}}/clp"
        "{{.G_CORE_COMPONENT_BUILD_DIR}}/clp-s"
        "{{.G_CORE_COMPONENT_BUILD_DIR}}/reducer-server"
        "{{.G_WEBUI_NODEJS_BIN_DIR}}/node"
        "{{.OUTPUT_DIR}}/bin/"
      - "mkdir -p '{{.OUTPUT_DIR}}/var/www/'"
      - >-
        rsync -a
        "{{.G_WEBUI_BUILD_DIR}}/"
        "{{.OUTPUT_DIR}}/var/www/"
      - |-
        cd "{{.OUTPUT_DIR}}/var/www/programs/server"
        PATH="{{.G_WEBUI_NODEJS_BIN_DIR}}":$PATH npm install
      # This command must be last
      - task: "compute-checksum"
        vars:
          DATA_DIR: "{{.OUTPUT_DIR}}"
          OUTPUT_FILE: "{{.CHECKSUM_FILE}}"
    sources:
      - "{{.G_BUILD_DIR}}/package-venv.md5"
      - "{{.G_BUILD_DIR}}/webui.md5"
      - "{{.G_BUILD_DIR}}/webui-nodejs.md5"
      - "{{.G_CORE_COMPONENT_BUILD_DIR}}/clg"
      - "{{.G_CORE_COMPONENT_BUILD_DIR}}/clo"
      - "{{.G_CORE_COMPONENT_BUILD_DIR}}/clp"
      - "{{.G_CORE_COMPONENT_BUILD_DIR}}/clp-s"
      - "{{.G_CORE_COMPONENT_BUILD_DIR}}/reducer-server"
      - "{{.TASKFILE}}"
      - "/etc/os-release"
      - "components/clp-package-utils/dist/*.whl"
      - "components/clp-py-utils/dist/*.whl"
      - "components/job-orchestration/dist/*.whl"
      - "components/package-template/src/**/*"
    generates: ["{{.CHECKSUM_FILE}}"]

  core:
    deps: ["core-submodules", "init"]
    vars:
      SRC_DIR: "components/core"
    cmds:
      - "mkdir -p '{{.G_CORE_COMPONENT_BUILD_DIR}}'"
      - "cmake -S '{{.SRC_DIR}}' -B '{{.G_CORE_COMPONENT_BUILD_DIR}}'"
      - >-
        cmake
        --build "{{.G_CORE_COMPONENT_BUILD_DIR}}"
        --parallel
        --target clg clo clp clp-s reducer-server
    sources:
      - "{{.G_BUILD_DIR}}/core-submodules.md5"
      - "{{.SRC_DIR}}/cmake/**/*"
      - "{{.SRC_DIR}}/CMakeLists.txt"
      - "{{.SRC_DIR}}/src/**/*"
      - "{{.TASKFILE}}"
      - "/etc/os-release"
    generates:
      - "{{.G_CORE_COMPONENT_BUILD_DIR}}/clg"
      - "{{.G_CORE_COMPONENT_BUILD_DIR}}/clo"
      - "{{.G_CORE_COMPONENT_BUILD_DIR}}/clp"
      - "{{.G_CORE_COMPONENT_BUILD_DIR}}/clp-s"
      - "{{.G_CORE_COMPONENT_BUILD_DIR}}/reducer-server"

  clp-package-utils:
    - task: "python-component"
      vars:
        COMPONENT: "{{.TASK}}"

  clp-py-utils:
    - task: "python-component"
      vars:
        COMPONENT: "{{.TASK}}"

  job-orchestration:
    - task: "python-component"
      vars:
        COMPONENT: "{{.TASK}}"

  webui:
    deps:
      - "init"
      - "meteor"
      - task: "validate-checksum"
        vars:
          CHECKSUM_FILE: "{{.CHECKSUM_FILE}}"
          DATA_DIR: "{{.OUTPUT_DIR}}"
      - "webui-node-modules"
    dir: "components/webui"
    platforms: ["386", "amd64"]
    vars:
      CHECKSUM_FILE: "{{.G_BUILD_DIR}}/{{.TASK}}.md5"
      OUTPUT_DIR: "{{.G_WEBUI_BUILD_DIR}}"
    cmds:
      - "rm -rf '{{.OUTPUT_DIR}}'"
      - "mkdir -p '{{.OUTPUT_DIR}}'"
      - "PATH='{{.G_METEOR_BUILD_DIR}}':$PATH meteor build --directory '{{.OUTPUT_DIR}}'"
      - >-
        rsync -a
        "{{.OUTPUT_DIR}}/bundle/"
        launcher.js
        settings.json
        "{{.OUTPUT_DIR}}/"
      - "rm -rf '{{.OUTPUT_DIR}}/bundle/'"
      # Remove temp files generated by `meteor build` before checksum
      - "find node_modules -type f -name '.meteor-portable-2.json' -exec rm {} +"
      # This command must be last
      - task: "compute-checksum"
        vars:
          DATA_DIR: "{{.OUTPUT_DIR}}"
          OUTPUT_FILE: "{{.CHECKSUM_FILE}}"
    sources:
      - "{{.G_BUILD_DIR}}/meteor.md5"
      - "{{.G_BUILD_DIR}}/webui-node-modules.md5"
      - "{{.TASKFILE}}"
      - "*"
      - ".meteor/*"
      - "client/**/*"
      - "imports/**/*"
      - "server/**/*"
      - "tests/**/*"
    generates: ["{{.CHECKSUM_FILE}}"]

  webui-nodejs:
    internal: true
    vars:
      CHECKSUM_FILE: "{{.G_BUILD_DIR}}/{{.TASK}}.md5"
      OUTPUT_DIR: "{{.G_WEBUI_NODEJS_BUILD_DIR}}"
    cmds:
      - task: "nodejs"
        vars:
          CHECKSUM_FILE: "{{.CHECKSUM_FILE}}"
          NODEJS_VERSION: "v14.21.3"
          OUTPUT_DIR: "{{.OUTPUT_DIR}}"

  core-submodules:
    internal: true
    dir: "components/core"
    vars:
      CHECKSUM_FILE: "{{.G_BUILD_DIR}}/{{.TASK}}.md5"
      OUTPUT_DIR: "submodules"
    deps:
      - "init"
      - task: "validate-checksum"
        vars:
          CHECKSUM_FILE: "{{.CHECKSUM_FILE}}"
          DATA_DIR: "{{.OUTPUT_DIR}}"
    cmds:
      - "tools/scripts/deps-download/download-all.sh"
      # This command must be last
      - task: "compute-checksum"
        vars:
          DATA_DIR: "{{.OUTPUT_DIR}}"
          OUTPUT_FILE: "{{.CHECKSUM_FILE}}"
    sources:
      - "{{.TASKFILE}}"
      - ".gitmodules"
      - "tools/scripts/deps-download/**/*"
    generates: ["{{.CHECKSUM_FILE}}"]

  download-and-extract-tar:
    internal: true
    requires:
      vars: ["CHECKSUM_FILE", "EXTRACTED_DIR_NAME", "TAR_NAME", "OUTPUT_DIR", "URL_PREFIX"]
    label: "{{.TASK}}-{{.TAR_NAME}}"
    vars:
      OUTPUT_TMP_DIR: "{{.OUTPUT_DIR}}-tmp"
      EXTRACTED_DIR: "{{.OUTPUT_TMP_DIR}}/{{.EXTRACTED_DIR_NAME}}"
      TAR_PATH: "{{.OUTPUT_TMP_DIR}}/{{.TAR_NAME}}"
    deps:
      - "init"
      - task: "validate-checksum"
        vars:
          CHECKSUM_FILE: "{{.CHECKSUM_FILE}}"
          DATA_DIR: "{{.OUTPUT_DIR}}"
    cmds:
      - "rm -rf '{{.OUTPUT_DIR}}' '{{.OUTPUT_TMP_DIR}}'"
      - "mkdir -p '{{.OUTPUT_TMP_DIR}}'"
      - >-
        curl --fail --location --show-error
        "{{.URL_PREFIX}}/{{.TAR_NAME}}"
        --output "{{.TAR_PATH}}"
      - "tar xf '{{.TAR_PATH}}' --directory '{{.OUTPUT_TMP_DIR}}'"
      - "mv '{{.EXTRACTED_DIR}}' '{{.OUTPUT_DIR}}'"
      - "rm -rf '{{.OUTPUT_TMP_DIR}}'"
      # This command must be last
      - task: "compute-checksum"
        vars:
          DATA_DIR: "{{.OUTPUT_DIR}}"
          OUTPUT_FILE: "{{.CHECKSUM_FILE}}"
    sources: ["{{.TASKFILE}}"]
    generates: ["{{.CHECKSUM_FILE}}"]

  meteor:
    run: "once"
    preconditions:
      - sh: >-
          (test "$(uname -m)" != "aarch64") || (test "$(uname -s)" != "Linux")
        msg: "Meteor 2.x does not support aarch64 on Linux"
    vars:
      CHECKSUM_FILE: "{{.G_BUILD_DIR}}/{{.TASK}}.md5"
      METEOR_ARCH: "{{ if eq ARCH \"arm64\" }}arm64{{ else }}x86_64{{ end }}"
      METEOR_PLATFORM: "{{ if eq OS \"darwin\" }}osx{{ else }}linux{{ end }}"
      METEOR_RELEASE: "2.15"
    cmds:
      - task: "download-and-extract-tar"
        vars:
          CHECKSUM_FILE: "{{.CHECKSUM_FILE}}"
          EXTRACTED_DIR_NAME: ".meteor"
          OUTPUT_DIR: "{{.G_METEOR_BUILD_DIR}}"
          TAR_NAME: "meteor-bootstrap-os.{{.METEOR_PLATFORM}}.{{.METEOR_ARCH}}.tar.gz"
          URL_PREFIX: "https://static.meteor.com/packages-bootstrap/{{.METEOR_RELEASE}}"

  nodejs:
    internal: true
    deps: ["init"]
    requires:
      vars: ["CHECKSUM_FILE", "NODEJS_VERSION", "OUTPUT_DIR"]
    vars:
      NODEJS_ARCH: "{{ if eq ARCH \"arm64\" }}arm64{{ else }}x64{{ end }}"
      NODEJS_VERSION_BASE_URL: "https://nodejs.org/dist/{{.NODEJS_VERSION}}/"
      NODEJS_FILE_BASE_NAME:
        sh: >-
          curl --header "Cache-Control: no-cache, no-store" --silent "{{.NODEJS_VERSION_BASE_URL}}"
          | grep
          --only-matching
          --max-count 1
          "node-v[[:digit:]]\+\.[[:digit:]]\+\.[[:digit:]]\+-{{OS}}-{{.NODEJS_ARCH}}"
          | head --lines 1
    cmds:
      - task: "download-and-extract-tar"
        vars:
          CHECKSUM_FILE: "{{.CHECKSUM_FILE}}"
          TAR_NAME: "{{.NODEJS_FILE_BASE_NAME}}.tar.xz"
          EXTRACTED_DIR_NAME: "{{.NODEJS_FILE_BASE_NAME}}"
          URL_PREFIX: "{{.NODEJS_VERSION_BASE_URL}}"
          OUTPUT_DIR: "{{.OUTPUT_DIR}}"

  package-tar:
    internal: true
    requires:
      vars: ["FLAVOUR", "STORAGE_ENGINE"]
    vars:
      VERSIONED_PACKAGE_NAME:
        sh: |
          source /etc/os-release
          echo "clp-{{.FLAVOUR}}-${ID}-${VERSION_CODENAME}-$(arch)-v{{.G_PACKAGE_VERSION}}"
      OUTPUT_DIR: "{{.G_BUILD_DIR}}/{{.VERSIONED_PACKAGE_NAME}}"
      OUTPUT_FILE: "{{.OUTPUT_DIR}}.tar.gz"
    dir: "{{.G_BUILD_DIR}}"
    deps: ["package"]
    cmds:
      - "rm -rf '{{.OUTPUT_DIR}}' '{{.OUTPUT_FILE}}'"
      # NOTE: The trailing slash after the source is necessary so that rsync copies
      # `/parents/A` -> `/parents/B` rather than `/parents/A` -> `/parents/B/A`
      - "rsync --archive '{{.G_PACKAGE_BUILD_DIR}}/' '{{.OUTPUT_DIR}}'"
      # Set the storage engine for the package
      - task: "replace-text"
        vars:
          FILE_PATH: "{{.OUTPUT_DIR}}/lib/python3/site-packages/clp_py_utils/clp_config.py"
          SED_EXP: >-
            s/([[:space:]]*storage_engine: str = ")[^"]+"/\1{{.STORAGE_ENGINE}}"/
      - task: "replace-text"
        vars:
          FILE_PATH: "{{.OUTPUT_DIR}}/etc/clp-config.yml"
          SED_EXP: >-
            s/(\#[[:space:]]*storage_engine: ")[^"]+"/\1{{.STORAGE_ENGINE}}"/
      - >-
        tar czf '{{.OUTPUT_FILE}}'
        --directory '{{.G_BUILD_DIR}}'
        --dereference '{{.VERSIONED_PACKAGE_NAME}}'
    sources:
      - "{{.G_BUILD_DIR}}/package.md5"
      - "{{.TASKFILE}}"
    generates:
      - "{{.VERSIONED_PACKAGE_NAME}}.tar.gz"

  package-venv:
    internal: true
    vars:
      CHECKSUM_FILE: "{{.G_BUILD_DIR}}/{{.TASK}}.md5"
      OUTPUT_DIR: "{{.G_PACKAGE_VENV_DIR}}"
    deps:
      - "init"
      - task: "validate-checksum"
        vars:
          CHECKSUM_FILE: "{{.CHECKSUM_FILE}}"
          DATA_DIR: "{{.OUTPUT_DIR}}"
    cmds:
      - task: "create-venv"
        vars:
          LABEL: "package"
          OUTPUT_DIR: "{{.OUTPUT_DIR}}"
          REQUIREMENTS_FILE: "requirements.txt"
      # This command must be last
      - task: "compute-checksum"
        vars:
          DATA_DIR: "{{.OUTPUT_DIR}}"
          OUTPUT_FILE: "{{.CHECKSUM_FILE}}"
    sources:
      - "{{.ROOT_DIR}}/requirements.txt"
      - "{{.TASKFILE}}"
      - "/etc/os-release"
    generates: ["{{.CHECKSUM_FILE}}"]

  python-component:
    internal: true
    requires:
      vars: ["COMPONENT"]
    label: "{{.COMPONENT}}"
    deps:
      - task: "component-venv"
        vars:
          COMPONENT: "{{.COMPONENT}}"
          OUTPUT_DIR: "{{.VENV_DIR}}"
    vars:
      PACKAGE:
        sh: "echo {{.COMPONENT}} | tr - _"
      VENV_DIR: "{{.G_BUILD_DIR}}/{{.COMPONENT}}/venv"
    dir: "components/{{.COMPONENT}}"
    cmds:
      - task: "clean-python-component"
        vars:
          COMPONENT: "{{.COMPONENT}}"
      - |-
        . "{{.VENV_DIR}}/bin/activate"
        poetry build --format wheel
    sources:
      - "{{.G_BUILD_DIR}}/{{.COMPONENT}}_venv.md5"
      - "{{.PACKAGE}}/**/*"
      - "{{.ROOT_DIR}}/requirements.txt"
      - "{{.TASKFILE}}"
      - "/etc/os-release"
      - "pyproject.toml"
    generates:
      - "dist/*.whl"

  webui-node-modules:
    internal: true
    vars:
      CHECKSUM_FILE: "{{.G_BUILD_DIR}}/{{.TASK}}.md5"
      WEBUI_SRC_DIR: "{{.ROOT_DIR}}/components/webui"
      OUTPUT_DIR: "{{.WEBUI_SRC_DIR}}/node_modules"
    dir: "{{.WEBUI_SRC_DIR}}"
    deps:
      - "init"
      - "meteor"
      - task: "validate-checksum"
        vars:
          CHECKSUM_FILE: "{{.CHECKSUM_FILE}}"
          DATA_DIR: "{{.OUTPUT_DIR}}"
    cmds:
      - "rm -rf '{{.OUTPUT_DIR}}'"
      - "PATH='{{.G_METEOR_BUILD_DIR}}':$PATH meteor npm install --production"
      # This command must be last
      - task: "compute-checksum"
        vars:
          DATA_DIR: "{{.OUTPUT_DIR}}"
          OUTPUT_FILE: "{{.CHECKSUM_FILE}}"
    sources:
      - "{{.G_BUILD_DIR}}/meteor.md5"
      - "{{.TASKFILE}}"
      - ".meteor/packages"
      - "package.json"
    generates: ["{{.CHECKSUM_FILE}}"]

  component-venv:
    internal: true
    requires:
      vars: ["COMPONENT", "OUTPUT_DIR"]
    label: "{{.COMPONENT}}-venv"
    dir: "components/{{.COMPONENT}}"
    vars:
      CHECKSUM_FILE: "{{.G_BUILD_DIR}}/{{.COMPONENT}}-venv.md5"
    deps:
      - "init"
      - task: "validate-checksum"
        vars:
          CHECKSUM_FILE: "{{.CHECKSUM_FILE}}"
          DATA_DIR: "{{.OUTPUT_DIR}}"
    cmds:
      - task: "create-venv"
        vars:
          LABEL: "{{.COMPONENT}}"
          OUTPUT_DIR: "{{.OUTPUT_DIR}}"
          REQUIREMENTS_FILE: "{{.ROOT_DIR}}/requirements.txt"
      # This command must be last
      - task: "compute-checksum"
        vars:
          DATA_DIR: "{{.OUTPUT_DIR}}"
          OUTPUT_FILE: "{{.CHECKSUM_FILE}}"
    sources:
      - "{{.ROOT_DIR}}/requirements.txt"
      - "{{.TASKFILE}}"
      - "/etc/os-release"
      - "pyproject.toml"
    generates: ["{{.CHECKSUM_FILE}}"]

  clean-python-component:
    internal: true
    requires:
      vars: ["COMPONENT"]
    label: "clean-{{.COMPONENT}}"
    dir: "components/{{.COMPONENT}}"
    cmds:
      - "rm -rf dist"

  create-venv:
    internal: true
    requires:
      vars: ["LABEL", "OUTPUT_DIR", "REQUIREMENTS_FILE"]
    label: "create-venv-{{.LABEL}}"
    cmds:
      - "rm -rf '{{.OUTPUT_DIR}}'"
      - "python3 -m venv '{{.OUTPUT_DIR}}'"
      # Remove calls to `hash` from the venv activation script since Task uses `gosh` rather than
      # `bash`.
      # NOTE: Older versions of Python's venv would only call `hash` if they detected the running
      # shell was one that had the command, but that's not the case in newer versions.
      - task: "replace-text"
        vars:
          FILE_PATH: "{{.OUTPUT_DIR}}/bin/activate"
          SED_EXP: >-
            s/^([[:space:]]*)hash[[:space:]]+.*/\1true/g
      - |-
        . "{{.OUTPUT_DIR}}/bin/activate"
        pip3 install --upgrade pip
        pip3 install --upgrade -r "{{.REQUIREMENTS_FILE}}"

  init:
    internal: true
    run: "once"
    silent: true
    cmd: "mkdir -p '{{.G_BUILD_DIR}}'"

  compute-checksum:
    desc: "Tries to compute a checksum for the given directory and output it to a file."
    internal: true
    # Ignore errors so that dependent tasks don't fail
    ignore_error: true
    silent: true
    requires:
      vars: ["DATA_DIR", "OUTPUT_FILE"]
    cmds:
      - >-
        tar cf -
        --directory "{{.DATA_DIR}}"
        --group=0
        --mtime='UTC 1970-01-01'
        --numeric-owner
        --owner=0
        --sort=name
        {{.CHECKSUM_TAR_BASE_ARGS}} . 2> /dev/null
        | md5sum > {{.OUTPUT_FILE}}

  validate-checksum:
    desc: "Validates the checksum of the given directory matches the checksum in the given file, or
    deletes the checksum file otherwise."
    internal: true
    silent: true
    requires:
      vars: ["CHECKSUM_FILE", "DATA_DIR"]
    vars:
      TMP_CHECKSUM_FILE: "{{.CHECKSUM_FILE}}.tmp"
    cmds:
      - task: "compute-checksum"
        vars:
          DATA_DIR: "{{.DATA_DIR}}"
          OUTPUT_FILE: "{{.TMP_CHECKSUM_FILE}}"
      - defer: "rm -f '{{.TMP_CHECKSUM_FILE}}'"
      # Check that the directory exists and the checksum matches; otherwise delete the checksum file
      - >-
        (
        test -d "{{.DATA_DIR}}"
        && diff -q '{{.TMP_CHECKSUM_FILE}}' '{{.CHECKSUM_FILE}}' 2> /dev/null
        ) || rm -f '{{.CHECKSUM_FILE}}'

  replace-text:
    desc: "Task to replace some text in a file using sed."
    internal: true
    requires:
      vars: ["FILE_PATH", "SED_EXP"]
    cmds:
      - |-
        # NOTE:
        # 1. We can't use `sed -i` since `-i` has different syntax on Linux and macOS
        # 2. We can't use `--regexp` instead of `-E` since `--regexp` is not supported on macOS
        src="{{.FILE_PATH}}"
        dst="{{.FILE_PATH}}.tmp"
        sed -E '{{.SED_EXP}}' "${src}" > "${dst}"
        mv "${dst}" "${src}"
