version: "3"

includes:
  lint: "lint-tasks.yml"

vars:
  BUILD_DIR: "{{.TASKFILE_DIR}}/build"
  CORE_COMPONENT_BUILD_DIR: "{{.TASKFILE_DIR}}/build/core"
  NODEJS_BIN_DIR: "{{.TASKFILE_DIR}}/build/nodejs/node/bin"
  NODEJS_BUILD_DIR: "{{.TASKFILE_DIR}}/build/nodejs"
  PACKAGE_BUILD_DIR: "{{.TASKFILE_DIR}}/build/clp-package"
  PACKAGE_VENV_DIR: "{{.TASKFILE_DIR}}/build/package-venv"
  PACKAGE_VERSION: "0.0.3-dev"
  PYTHON_VERSION:
    sh: "python3 -c \"import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')\""
  WEBUI_BUILD_DIR: "{{.TASKFILE_DIR}}/build/webui"

tasks:
  default:
    deps: ["package"]

  clean:
    cmds:
      - "rm -rf '{{.BUILD_DIR}}'"
      - task: "clean-python-component"
        vars:
          COMPONENT: "clp-package-utils"
      - task: "clean-python-component"
        vars:
          COMPONENT: "clp-py-utils"
      - task: "clean-python-component"
        vars:
          COMPONENT: "job-orchestration"

  clean-package:
    cmds:
      - "rm -rf '{{.PACKAGE_BUILD_DIR}}'"

  package-tar:
    deps:
      - "package"
    vars:
      VERSIONED_PACKAGE_NAME:
        sh: |
          source /etc/os-release
          echo "clp-package-${ID}-${VERSION_CODENAME}-$(arch)-v{{.PACKAGE_VERSION}}"
    dir: "{{.BUILD_DIR}}"
    method: "timestamp"
    cmds:
      - "rm -rf '{{.VERSIONED_PACKAGE_NAME}}' '{{.VERSIONED_PACKAGE_NAME}}.tar.gz'"
      - "ln -s '{{.PACKAGE_BUILD_DIR}}' '{{.VERSIONED_PACKAGE_NAME}}'"
      - "tar czf '{{.VERSIONED_PACKAGE_NAME}}.tar.gz' --dereference '{{.VERSIONED_PACKAGE_NAME}}'"
    sources:
      - "{{.PACKAGE_BUILD_DIR}}/**/*"
    status:
      - "test -e {{.VERSIONED_PACKAGE_NAME}}.tar.gz"
      - "test {{.TIMESTAMP | unixEpoch}} -lt $(stat --format %Y {{.VERSIONED_PACKAGE_NAME}}.tar.gz)"

  package:
    vars:
      PACKAGE_VERSION_FILE: "{{.PACKAGE_BUILD_DIR}}/VERSION"
    deps:
      - "core"
      - "clp-package-utils"
      - "clp-py-utils"
      - "job-orchestration"
      - "package-venv"
      - "nodejs"
      - "webui"
    cmds:
      - task: "clean-package"
      - "mkdir -p '{{.PACKAGE_BUILD_DIR}}'"
      - "rsync -a components/package-template/src/ '{{.PACKAGE_BUILD_DIR}}'"
      - "mkdir -p '{{.PACKAGE_BUILD_DIR}}/lib/python3/site-packages'"
      - |-
        . "{{.PACKAGE_VENV_DIR}}/bin/activate"
        pip3 install --upgrade \
          components/clp-package-utils/dist/*.whl \
          components/clp-py-utils/dist/*.whl \
          components/job-orchestration/dist/*.whl \
          -t "{{.PACKAGE_BUILD_DIR}}/lib/python3/site-packages"
      - "mkdir -p '{{.PACKAGE_BUILD_DIR}}/bin'"
      - >-
        rsync -a
        "{{.CORE_COMPONENT_BUILD_DIR}}/clg"
        "{{.CORE_COMPONENT_BUILD_DIR}}/clo"
        "{{.CORE_COMPONENT_BUILD_DIR}}/clp"
        "{{.CORE_COMPONENT_BUILD_DIR}}/clp-s"
        "{{.NODEJS_BIN_DIR}}/node"
        "{{.PACKAGE_BUILD_DIR}}/bin/"
      - "mkdir -p '{{.PACKAGE_BUILD_DIR}}/var/www/'"
      - >-
        rsync -a
        "{{.WEBUI_BUILD_DIR}}/"
        "{{.PACKAGE_BUILD_DIR}}/var/www/"
      - |-
        cd "{{.PACKAGE_BUILD_DIR}}/var/www/programs/server"
        PATH="{{.NODEJS_BIN_DIR}}":$PATH npm install
      # This step must be last since we use this file to detect whether the package was built
      # successfully
      - "echo {{.PACKAGE_VERSION}} > '{{.PACKAGE_VERSION_FILE}}'"
    method: "timestamp"
    sources:
      - "{{.CORE_COMPONENT_BUILD_DIR}}/clg"
      - "{{.CORE_COMPONENT_BUILD_DIR}}/clo"
      - "{{.CORE_COMPONENT_BUILD_DIR}}/clp"
      - "{{.CORE_COMPONENT_BUILD_DIR}}/clp-s"
      - "{{.NODEJS_BUILD_DIR}}/node/**/*"
      - "{{.TASKFILE_DIR}}/Taskfile.yml"
      - "{{.WEBUI_BUILD_DIR}}/**/*"
      - "components/clp-package-utils/dist/*.whl"
      - "components/clp-py-utils/dist/*.whl"
      - "components/job-orchestration/dist/*.whl"
      - "components/package-template/src/**/*"
    status:
      - "test -e '{{.PACKAGE_VERSION_FILE}}'"
      - "test {{.TIMESTAMP | unixEpoch}} -lt $(stat --format %Y '{{.PACKAGE_VERSION_FILE}}')"

  core:
    deps: ["core-submodules"]
    vars:
      SRC_DIR: "components/core"
    cmds:
      - "mkdir -p '{{.CORE_COMPONENT_BUILD_DIR}}'"
      - "cmake -S '{{.SRC_DIR}}' -B '{{.CORE_COMPONENT_BUILD_DIR}}'"
      - "cmake --build '{{.CORE_COMPONENT_BUILD_DIR}}' --parallel --target clg clo clp clp-s"
    method: "timestamp"
    sources:
      - "{{.SRC_DIR}}/cmake/**/*"
      - "{{.SRC_DIR}}/CMakeLists.txt"
      - "{{.SRC_DIR}}/src/**/*"
      - "{{.SRC_DIR}}/submodules/**/*"
      - "{{.TASKFILE_DIR}}/Taskfile.yml"
    status:
      - >-
        test -e '{{.CORE_COMPONENT_BUILD_DIR}}/clg'
        && test -e '{{.CORE_COMPONENT_BUILD_DIR}}/clo'
        && test -e '{{.CORE_COMPONENT_BUILD_DIR}}/clp'
        && test -e '{{.CORE_COMPONENT_BUILD_DIR}}/clp-s'
      - >-
        test {{.TIMESTAMP | unixEpoch}} -lt $(stat --format %Y '{{.CORE_COMPONENT_BUILD_DIR}}/clg')
        && test {{.TIMESTAMP | unixEpoch}} -lt
        $(stat --format %Y '{{.CORE_COMPONENT_BUILD_DIR}}/clo')
        && test {{.TIMESTAMP | unixEpoch}} -lt
        $(stat --format %Y '{{.CORE_COMPONENT_BUILD_DIR}}/clp')
        && test {{.TIMESTAMP | unixEpoch}} -lt
        $(stat --format %Y '{{.CORE_COMPONENT_BUILD_DIR}}/clp-s')

  clp-package-utils:
    - task: "python-component"
      vars:
        COMPONENT: "{{.TASK}}"

  clp-py-utils:
    - task: "python-component"
      vars:
        COMPONENT: "{{.TASK}}"

  job-orchestration:
    - task: "python-component"
      vars:
        COMPONENT: "{{.TASK}}"

  nodejs:
    vars:
      NODEJS_VERSION: "14.21.3"
      NODEJS_ARCH: "{{ if eq ARCH \"arm64\" }}arm64{{ else }}x64{{ end }}"
      TAR_FILE_NAME: "node-v{{.NODEJS_VERSION}}-linux-{{.NODEJS_ARCH}}.tar.xz"
    cmds:
      - "rm -rf '{{.NODEJS_BUILD_DIR}}/node'"
      - "mkdir -p '{{.NODEJS_BUILD_DIR}}'"
      - >-
        curl -fsSL
        "https://nodejs.org/dist/v{{.NODEJS_VERSION}}/{{.TAR_FILE_NAME}}"
        -o "{{.NODEJS_BUILD_DIR}}/{{.TAR_FILE_NAME}}"
      - "tar xf '{{.NODEJS_BUILD_DIR}}/{{.TAR_FILE_NAME}}' -C '{{.NODEJS_BUILD_DIR}}'"
      - >-
        mv "{{.NODEJS_BUILD_DIR}}/node-v{{.NODEJS_VERSION}}-linux-{{.NODEJS_ARCH}}"
        "{{.NODEJS_BUILD_DIR}}/node"
      - "rm -f '{{.NODEJS_BUILD_DIR}}/{{.TAR_FILE_NAME}}'"
    sources:
      - "{{.NODEJS_BUILD_DIR}}/node/**/*"

  webui:
    dir: "components/webui"
    platforms: ["386", "amd64"]
    cmds:
      - "rm -rf '{{.WEBUI_BUILD_DIR}}'"
      - "mkdir -p '{{.WEBUI_BUILD_DIR}}'"
      - "meteor npm install --production"
      - "meteor build --directory '{{.WEBUI_BUILD_DIR}}'"
      - >-
        rsync -a
        "{{.WEBUI_BUILD_DIR}}/bundle/"
        launcher.js
        settings.json
        "{{.WEBUI_BUILD_DIR}}/"
      - "rm -rf '{{.WEBUI_BUILD_DIR}}/bundle/'"
    sources:
      - ".meteor/*"
      - "client/**/*"
      - "imports/**/*"
      - "server/**/*"
      - "tests/**/*"
      - "*"
      - "{{.WEBUI_BUILD_DIR}}/**/*"

  core-submodules:
    internal: true
    dir: "components/core"
    cmds:
      - "tools/scripts/deps-download/download-all.sh"
    sources:
      - ".gitmodules"
      - "tools/scripts/deps-download/**/*"

  package-venv:
    internal: true
    vars:
      CREATION_TIMESTAMP_FILE: "{{.PACKAGE_VENV_DIR}}/creation_time.txt"
    cmds:
      - "rm -rf '{{.PACKAGE_VENV_DIR}}'"
      - "python3 -m venv '{{.PACKAGE_VENV_DIR}}'"
      - |-
        . "{{.PACKAGE_VENV_DIR}}/bin/activate"
        pip3 install --upgrade -r "{{.TASKFILE_DIR}}/requirements.txt"
      # This step must be last since we use this file to detect whether the venv was created
      # successfully
      - "date +%s > '{{.CREATION_TIMESTAMP_FILE}}'"
    method: "timestamp"
    sources:
      - "{{.TASKFILE_DIR}}/requirements.txt"
      - "{{.TASKFILE_DIR}}/Taskfile.yml"
    status:
      - "test -e '{{.CREATION_TIMESTAMP_FILE}}'"
      - "test {{.TIMESTAMP | unixEpoch}} -lt $(stat --format %Y '{{.CREATION_TIMESTAMP_FILE}}')"

  python-component:
    internal: true
    requires:
      vars: ["COMPONENT"]
    label: "{{.COMPONENT}}"
    deps:
      - task: "component-venv"
        vars:
          COMPONENT: "{{.COMPONENT}}"
          COMPONENT_VENV_DIR: "{{.VENV_DIR}}"
    vars:
      PACKAGE:
        sh: "echo {{.COMPONENT}} | tr - _"
      VENV_DIR: "{{.BUILD_DIR}}/{{.COMPONENT}}/venv"
    dir: "components/{{.COMPONENT}}"
    cmds:
      - task: "clean-python-component"
        vars:
          COMPONENT: "{{.COMPONENT}}"
      - |-
        . "{{.VENV_DIR}}/bin/activate"
        poetry build --format wheel
    method: "timestamp"
    sources:
      - "{{.PACKAGE}}/**/*"
      - "{{.TASKFILE_DIR}}/requirements.txt"
      - "{{.TASKFILE_DIR}}/Taskfile.yml"
      - "pyproject.toml"
    status:
      - "ls dist/*.whl"
      - "test {{.TIMESTAMP | unixEpoch}} -lt $(stat --format %Y dist/*.whl)"

  component-venv:
    internal: true
    requires:
      vars: ["COMPONENT", "COMPONENT_VENV_DIR"]
    label: "{{.COMPONENT}}_venv"
    dir: "components/{{.COMPONENT}}"
    vars:
      CREATION_TIMESTAMP_FILE: "{{.COMPONENT_VENV_DIR}}/creation_time.txt"
    cmds:
      - "rm -rf '{{.COMPONENT_VENV_DIR}}'"
      - "python3 -m venv '{{.COMPONENT_VENV_DIR}}'"
      - |-
        . "{{.COMPONENT_VENV_DIR}}/bin/activate"
        pip3 install --upgrade -r "{{.TASKFILE_DIR}}/requirements.txt"
      # This step must be last since we use this file to detect whether the venv was created
      # successfully
      - "date +%s > '{{.CREATION_TIMESTAMP_FILE}}'"
    method: "timestamp"
    sources:
      - "{{.TASKFILE_DIR}}/requirements.txt"
      - "{{.TASKFILE_DIR}}/Taskfile.yml"
      - "pyproject.toml"
    status:
      - "test -e '{{.CREATION_TIMESTAMP_FILE}}'"
      - "test {{.TIMESTAMP | unixEpoch}} -lt $(stat --format %Y '{{.CREATION_TIMESTAMP_FILE}}')"

  clean-python-component:
    internal: true
    requires:
      vars: ["COMPONENT"]
    label: "clean-{{.COMPONENT}}"
    dir: "components/{{.COMPONENT}}"
    cmds:
      - "rm -rf dist"
