version: "3"

set: ["u", "pipefail"]
shopt: ["globstar"]

includes:
  deps: "taskfiles/deps/main.yaml"
  docs: "taskfiles/docs.yaml"
  lint: "taskfiles/lint.yaml"
  utils: "tools/yscope-dev-utils/exports/taskfiles/utils/utils.yaml"

vars:
  # Source paths
  G_COMPONENTS_DIR: "{{.ROOT_DIR}}/components"
  G_CORE_COMPONENT_DIR: "{{.G_COMPONENTS_DIR}}/core"
  G_CORE_COMPONENT_SUBMODULES_DIR: "{{.G_CORE_COMPONENT_DIR}}/submodules"
  G_WEBUI_SRC_DIR: "{{.G_COMPONENTS_DIR}}/webui"

  # Build paths
  G_BUILD_DIR: "{{.ROOT_DIR}}/build"
  G_CORE_COMPONENT_BUILD_DIR: "{{.G_BUILD_DIR}}/core"
  G_NODEJS_22_BUILD_DIR: "{{.G_BUILD_DIR}}/nodejs-22"
  G_NODEJS_22_BIN_DIR: "{{.G_NODEJS_22_BUILD_DIR}}/bin"
  G_PACKAGE_BUILD_DIR: "{{.G_BUILD_DIR}}/clp-package"
  G_PACKAGE_VENV_DIR: "{{.G_BUILD_DIR}}/package-venv"
  G_WEBUI_BUILD_DIR: "{{.G_BUILD_DIR}}/webui"

  # Taskfile paths
  G_UTILS_TASKFILE: "{{.ROOT_DIR}}/tools/yscope-dev-utils/exports/taskfiles/utils/utils.yaml"

  # Versions
  G_PACKAGE_VERSION: "0.2.0-dev"

  # Build parameters
  # NOTE: Defaulting to an empty string is safe since CMake ignores an empty string.
  G_CORE_MAX_PARALLELISM_PER_BUILD_TASK: >-
    {{default "" (env "CLP_CORE_MAX_PARALLELISM_PER_BUILD_TASK")}}

  # Checksum files
  G_WEBUI_CLIENT_NODE_MODULES_CHECKSUM_FILE: "{{.G_BUILD_DIR}}/webui-client-node-modules.md5"
  G_WEBUI_LOG_VIEWER_NODE_MODULES_CHECKSUM_FILE:
    "{{.G_BUILD_DIR}}/webui-log-viewer-node-modules.md5"
  G_WEBUI_PACKAGE_NODE_MODULES_CHECKSUM_FILE: "{{.G_BUILD_DIR}}/webui-package-node-modules.md5"
  G_WEBUI_SERVER_NODE_MODULES_CHECKSUM_FILE: "{{.G_BUILD_DIR}}/webui-server-node-modules.md5"

tasks:
  default:
    deps: ["package"]

  clean:
    cmds:
      - "rm -rf '{{.G_BUILD_DIR}}'"
      - task: "clean-python-component"
        vars:
          COMPONENT: "clp-package-utils"
      - task: "clean-python-component"
        vars:
          COMPONENT: "clp-py-utils"
      - task: "clean-python-component"
        vars:
          COMPONENT: "job-orchestration"
      - task: "clean-webui"

  clean-core:
    cmds:
      - task: "utils:cmake:clean"
        vars:
          BUILD_DIR: "{{.G_CORE_COMPONENT_BUILD_DIR}}"

  clp-json-pkg-tar:
    cmds:
      - task: "package-tar"
        vars:
          FLAVOUR: "json"
          STORAGE_ENGINE: "clp-s"

  clp-text-pkg-tar:
    cmds:
      - task: "package-tar"
        vars:
          FLAVOUR: "text"
          STORAGE_ENGINE: "clp"

  clean-webui:
    cmds:
      - "rm -rf '{{.G_WEBUI_SRC_DIR}}/client/node_modules'"
      - "rm -rf '{{.G_WEBUI_SRC_DIR}}/node_modules'"
      - "rm -rf '{{.G_WEBUI_SRC_DIR}}/server/node_modules'"
      - "rm -rf '{{.G_WEBUI_SRC_DIR}}/yscope-log-viewer/node_modules'"

  package:
    env:
      NODE_ENV: "production"
    vars:
      CHECKSUM_FILE: "{{.G_BUILD_DIR}}/{{.TASK}}.md5"
      OUTPUT_DIR: "{{.G_PACKAGE_BUILD_DIR}}"
    sources:
      - "{{.G_BUILD_DIR}}/package-venv.md5"
      - "{{.G_BUILD_DIR}}/webui.md5"
      - "{{.G_CORE_COMPONENT_BUILD_DIR}}/clg"
      - "{{.G_CORE_COMPONENT_BUILD_DIR}}/clo"
      - "{{.G_CORE_COMPONENT_BUILD_DIR}}/clp"
      - "{{.G_CORE_COMPONENT_BUILD_DIR}}/clp-s"
      - "{{.G_CORE_COMPONENT_BUILD_DIR}}/indexer"
      - "{{.G_CORE_COMPONENT_BUILD_DIR}}/reducer-server"
      - "{{.TASKFILE}}"
      - "/etc/os-release"
      - "components/clp-package-utils/dist/*.whl"
      - "components/clp-py-utils/dist/*.whl"
      - "components/job-orchestration/dist/*.whl"
      - "components/package-template/src/**/*"
    generates: ["{{.CHECKSUM_FILE}}"]
    deps:
      - "core"
      - "clp-package-utils"
      - "clp-py-utils"
      - "init"
      - "job-orchestration"
      - "package-venv"
      - task: "utils:checksum:validate"
        vars:
          CHECKSUM_FILE: "{{.CHECKSUM_FILE}}"
          INCLUDE_PATTERNS: ["{{.OUTPUT_DIR}}"]
      - "webui"
    cmds:
      - "rm -rf '{{.OUTPUT_DIR}}'"
      - "rsync -a components/package-template/src/ '{{.OUTPUT_DIR}}'"
      - "rsync --copy-links /etc/os-release '{{.OUTPUT_DIR}}/etc/os-release'"
      - "mkdir -p '{{.OUTPUT_DIR}}/lib/python3/site-packages'"
      - |-
        . "{{.G_PACKAGE_VENV_DIR}}/bin/activate"
        pip3 install --upgrade \
          components/clp-package-utils/dist/*.whl \
          components/clp-py-utils/dist/*.whl \
          components/job-orchestration/dist/*.whl \
          -t "{{.OUTPUT_DIR}}/lib/python3/site-packages"
      - "mkdir -p '{{.OUTPUT_DIR}}/bin'"
      - >-
        rsync -a
        "{{.G_CORE_COMPONENT_BUILD_DIR}}/clg"
        "{{.G_CORE_COMPONENT_BUILD_DIR}}/clo"
        "{{.G_CORE_COMPONENT_BUILD_DIR}}/clp"
        "{{.G_CORE_COMPONENT_BUILD_DIR}}/clp-s"
        "{{.G_CORE_COMPONENT_BUILD_DIR}}/indexer"
        "{{.G_CORE_COMPONENT_BUILD_DIR}}/reducer-server"
        "{{.OUTPUT_DIR}}/bin/"
      - >-
        rsync -a
        "{{.G_NODEJS_22_BIN_DIR}}/node"
        "{{.OUTPUT_DIR}}/bin/node-22"
      - "mkdir -p '{{.OUTPUT_DIR}}/var/www/'"
      - >-
        rsync -a
        "{{.G_WEBUI_BUILD_DIR}}/"
        "{{.OUTPUT_DIR}}/var/www/webui"
      - |-
        cd "{{.OUTPUT_DIR}}/var/www/webui/server"
        PATH="{{.G_NODEJS_22_BIN_DIR}}":$PATH npm clean-install
      # This command must be last
      - task: "utils:checksum:compute"
        vars:
          CHECKSUM_FILE: "{{.CHECKSUM_FILE}}"
          INCLUDE_PATTERNS: ["{{.OUTPUT_DIR}}"]

  clp-s-generate-parsers:
    vars:
      CHECKSUM_FILE: "{{.G_BUILD_DIR}}/{{.TASK}}.md5"
      OUTPUT_DIRS:
        - "{{.G_CORE_COMPONENT_DIR}}/src/clp_s/search/kql/generated"
        - "{{.G_CORE_COMPONENT_DIR}}/src/clp_s/search/sql/generated"
    deps:
      - "deps:antlr-jar"
      - task: "utils:checksum:validate"
        vars:
          CHECKSUM_FILE: "{{.CHECKSUM_FILE}}"
          INCLUDE_PATTERNS:
            ref: ".OUTPUT_DIRS"
    generates: ["{{.CHECKSUM_FILE}}"]
    sources:
      - "{{.G_CORE_COMPONENT_DIR}}/src/clp_s/search/kql/Kql.g4"
      - "{{.G_CORE_COMPONENT_DIR}}/src/clp_s/search/sql/Sql.g4"
    dir: "{{.G_CORE_COMPONENT_DIR}}/src/"
    cmds:
      - for: ["kql", "sql"]
        cmd: |-
          rm -rf "{{.G_CORE_COMPONENT_DIR}}/src/clp_s/search/{{.ITEM}}/generated/"* \
          && java -jar {{.G_ANTLR_JAR_FILE}} \
            -Dlanguage=Cpp \
            -no-listener \
            -visitor \
            -package clp_s::search::{{.ITEM}}::generated \
            -o clp_s/search/{{.ITEM}}/generated \
            -Xexact-output-dir \
            clp_s/search/{{.ITEM}}/*.g4 \
            && find "{{.G_CORE_COMPONENT_DIR}}/src/clp_s/search/{{.ITEM}}/generated" \
              -type f -and -not \( -name "*.cpp" -o -name "*.h" \) \
              -exec rm {} \;

      # This command must be last
      - task: "utils:checksum:compute"
        vars:
          CHECKSUM_FILE: "{{.CHECKSUM_FILE}}"
          INCLUDE_PATTERNS:
            ref: ".OUTPUT_DIRS"

  core:
    cmds:
      - task: "core-generate"
      - task: "core-build"

  core-generate:
    internal: true
    sources: &core_source_files
      - "{{.G_DEPS_CORE_CHECKSUM_FILE}}"
      - "{{.G_CORE_COMPONENT_DIR}}/cmake/**/*"
      - "{{.G_CORE_COMPONENT_DIR}}/CMakeLists.txt"
      - "{{.G_CORE_COMPONENT_DIR}}/src/**/*"
      - "{{.TASKFILE}}"
      - "/etc/os-release"
    deps:
      - "clp-s-generate-parsers"
      - "deps:core"
    cmds:
      - task: "utils:cmake:generate"
        vars:
          BUILD_DIR: "{{.G_CORE_COMPONENT_BUILD_DIR}}"
          SOURCE_DIR: "{{.G_CORE_COMPONENT_DIR}}"

  core-build:
    internal: true
    sources: *core_source_files
    generates:
      - "{{.G_CORE_COMPONENT_BUILD_DIR}}/clg"
      - "{{.G_CORE_COMPONENT_BUILD_DIR}}/clo"
      - "{{.G_CORE_COMPONENT_BUILD_DIR}}/clp"
      - "{{.G_CORE_COMPONENT_BUILD_DIR}}/clp-s"
      - "{{.G_CORE_COMPONENT_BUILD_DIR}}/indexer"
      - "{{.G_CORE_COMPONENT_BUILD_DIR}}/reducer-server"
    cmds:
      - task: "utils:cmake:build"
        vars:
          BUILD_DIR: "{{.G_CORE_COMPONENT_BUILD_DIR}}"
          JOBS: "{{.G_CORE_MAX_PARALLELISM_PER_BUILD_TASK}}"
          TARGETS: ["clg", "clo", "clp", "clp-s", "indexer", "reducer-server"]

  clp-package-utils:
    - task: "python-component"
      vars:
        COMPONENT: "{{.TASK}}"

  clp-py-utils:
    - task: "python-component"
      vars:
        COMPONENT: "{{.TASK}}"

  job-orchestration:
    - task: "python-component"
      vars:
        COMPONENT: "{{.TASK}}"

  webui:
    vars:
      CHECKSUM_FILE: "{{.G_BUILD_DIR}}/{{.TASK}}.md5"
      OUTPUT_DIR: "{{.G_WEBUI_BUILD_DIR}}"
    sources:
      - "{{.G_WEBUI_CLIENT_NODE_MODULES_CHECKSUM_FILE}}"
      - "{{.G_WEBUI_LOG_VIEWER_NODE_MODULES_CHECKSUM_FILE}}"
      - "{{.G_WEBUI_PACKAGE_NODE_MODULES_CHECKSUM_FILE}}"
      - "{{.G_WEBUI_SERVER_NODE_MODULES_CHECKSUM_FILE}}"
      - "{{.TASKFILE}}"
      - "**/*"
      - exclude: "**/dist/**/*"
      - exclude: "**/node_modules/**/*"
    dir: "{{.G_WEBUI_SRC_DIR}}"
    generates: ["{{.CHECKSUM_FILE}}"]
    deps:
      - "init"
      - task: "utils:checksum:validate"
        vars:
          CHECKSUM_FILE: "{{.CHECKSUM_FILE}}"
          INCLUDE_PATTERNS: ["{{.OUTPUT_DIR}}"]
      - "webui-node-modules"
    cmds:
      - "rm -rf '{{.OUTPUT_DIR}}'"
      - "mkdir -p '{{.OUTPUT_DIR}}'"
      - for: ["client", "yscope-log-viewer"]
        cmd: |-
          cd "{{.G_WEBUI_SRC_DIR}}/{{.ITEM}}"
          PATH="{{.G_NODEJS_22_BIN_DIR}}":$PATH npm run build -- \
          --emptyOutDir --outDir '{{.OUTPUT_DIR}}/{{.ITEM}}'
      - |-
        cd server
        PATH="{{.G_NODEJS_22_BIN_DIR}}":$PATH npx tsc --outDir '{{.OUTPUT_DIR}}/server/dist'
        rsync -a \
        package.json package-lock.json \
        "{{.OUTPUT_DIR}}/server/"
      - task: "utils:checksum:compute"
        vars:
          CHECKSUM_FILE: "{{.CHECKSUM_FILE}}"
          INCLUDE_PATTERNS: ["{{.OUTPUT_DIR}}"]

  nodejs-22:
    internal: true
    vars:
      CHECKSUM_FILE: "{{.G_BUILD_DIR}}/{{.TASK}}.md5"
      OUTPUT_DIR: "{{.G_NODEJS_22_BUILD_DIR}}"
    run: "once"
    cmds:
      - task: "nodejs"
        vars:
          CHECKSUM_FILE: "{{.CHECKSUM_FILE}}"
          NODEJS_VERSION: "v22.4.0"
          OUTPUT_DIR: "{{.OUTPUT_DIR}}"

  download-and-extract-tar:
    internal: true
    label: "{{.TASK}}-{{.TAR_NAME}}"
    vars:
      OUTPUT_TMP_DIR: "{{.OUTPUT_DIR}}-tmp"
      EXTRACTED_DIR: "{{.OUTPUT_TMP_DIR}}/{{.EXTRACTED_DIR_NAME}}"
      TAR_PATH: "{{.OUTPUT_TMP_DIR}}/{{.TAR_NAME}}"
    requires:
      vars: ["CHECKSUM_FILE", "EXTRACTED_DIR_NAME", "TAR_NAME", "OUTPUT_DIR", "URL_PREFIX"]
    sources: ["{{.TASKFILE}}"]
    generates: ["{{.CHECKSUM_FILE}}"]
    deps:
      - "init"
      - task: "utils:checksum:validate"
        vars:
          CHECKSUM_FILE: "{{.CHECKSUM_FILE}}"
          INCLUDE_PATTERNS: ["{{.OUTPUT_DIR}}"]
    cmds:
      - "rm -rf '{{.OUTPUT_DIR}}' '{{.OUTPUT_TMP_DIR}}'"
      - "mkdir -p '{{.OUTPUT_TMP_DIR}}'"
      - >-
        curl --fail --location --show-error
        "{{trimSuffix "/" .URL_PREFIX}}/{{.TAR_NAME}}"
        --output "{{.TAR_PATH}}"
      - "tar xf '{{.TAR_PATH}}' --directory '{{.OUTPUT_TMP_DIR}}'"
      - "mv '{{.EXTRACTED_DIR}}' '{{.OUTPUT_DIR}}'"
      - "rm -rf '{{.OUTPUT_TMP_DIR}}'"
      # This command must be last
      - task: "utils:checksum:compute"
        vars:
          CHECKSUM_FILE: "{{.CHECKSUM_FILE}}"
          INCLUDE_PATTERNS: ["{{.OUTPUT_DIR}}"]

  # NOTE: The webui has four different node_modules directories, and we generate a checksum file for
  # each one. The directories are:
  # * client
  # * server
  # * log-viewer submodule
  # * the top-level one we call "package"
  webui-node-modules:
    internal: true
    vars:
      SRC_DIR: "{{.TASKFILE_DIR}}/components/webui"
      CLIENT_OUTPUT_DIR: "{{.SRC_DIR}}/client/node_modules"
      LOG_VIEWER_OUTPUT_DIR: "{{.SRC_DIR}}/yscope-log-viewer/node_modules"
      PACKAGE_OUTPUT_DIR: "{{.SRC_DIR}}/node_modules"
      SERVER_OUTPUT_DIR: "{{.SRC_DIR}}/server/node_modules"
    sources:
      - "{{.G_DEPS_LOG_VIEWER_CHECKSUM_FILE}}"
      - "{{.G_BUILD_DIR}}/nodejs-22.md5"
      - "{{.TASKFILE}}"
      - "client/package.json"
      - "client/package-lock.json"
      - "package.json"
      - "package-lock.json"
      - "server/package.json"
      - "server/package-lock.json"
      - "yscope-log-viewer/package.json"
      - "yscope-log-viewer/package-lock.json"
    dir: "{{.SRC_DIR}}"
    generates:
      - "{{.G_WEBUI_CLIENT_NODE_MODULES_CHECKSUM_FILE}}"
      - "{{.G_WEBUI_LOG_VIEWER_NODE_MODULES_CHECKSUM_FILE}}"
      - "{{.G_WEBUI_PACKAGE_NODE_MODULES_CHECKSUM_FILE}}"
      - "{{.G_WEBUI_SERVER_NODE_MODULES_CHECKSUM_FILE}}"
    deps:
      - "deps:log-viewer"
      - "nodejs-22"
      - task: "utils:checksum:validate"
        vars:
          CHECKSUM_FILE: "{{.G_WEBUI_CLIENT_NODE_MODULES_CHECKSUM_FILE}}"
          INCLUDE_PATTERNS: ["{{.CLIENT_OUTPUT_DIR}}"]
          EXCLUDE_PATTERNS: &webui_node_modules_checksum_exclude_patterns
            - ".tmp"
            - ".vite-temp"
      - task: "utils:checksum:validate"
        vars:
          CHECKSUM_FILE: "{{.G_WEBUI_LOG_VIEWER_NODE_MODULES_CHECKSUM_FILE}}"
          INCLUDE_PATTERNS: ["{{.LOG_VIEWER_OUTPUT_DIR}}"]
      - task: "utils:checksum:validate"
        vars:
          CHECKSUM_FILE: "{{.G_WEBUI_PACKAGE_NODE_MODULES_CHECKSUM_FILE}}"
          INCLUDE_PATTERNS: ["{{.PACKAGE_OUTPUT_DIR}}"]
      - task: "utils:checksum:validate"
        vars:
          CHECKSUM_FILE: "{{.G_WEBUI_SERVER_NODE_MODULES_CHECKSUM_FILE}}"
          INCLUDE_PATTERNS: ["{{.SERVER_OUTPUT_DIR}}"]
    cmds:
      - task: "clean-webui"
      - "PATH='{{.G_NODEJS_22_BIN_DIR}}':$PATH npm run init"
      - |-
        cd yscope-log-viewer
        PATH="{{.G_NODEJS_22_BIN_DIR}}":$PATH npm clean-install
      # These commands must be last
      - task: "utils:checksum:compute"
        vars:
          CHECKSUM_FILE: "{{.G_WEBUI_CLIENT_NODE_MODULES_CHECKSUM_FILE}}"
          INCLUDE_PATTERNS: ["{{.CLIENT_OUTPUT_DIR}}"]
          EXCLUDE_PATTERNS: *webui_node_modules_checksum_exclude_patterns
      - task: "utils:checksum:compute"
        vars:
          CHECKSUM_FILE: "{{.G_WEBUI_LOG_VIEWER_NODE_MODULES_CHECKSUM_FILE}}"
          INCLUDE_PATTERNS: ["{{.LOG_VIEWER_OUTPUT_DIR}}"]
      - task: "utils:checksum:compute"
        vars:
          CHECKSUM_FILE: "{{.G_WEBUI_PACKAGE_NODE_MODULES_CHECKSUM_FILE}}"
          INCLUDE_PATTERNS: ["{{.PACKAGE_OUTPUT_DIR}}"]
      - task: "utils:checksum:compute"
        vars:
          CHECKSUM_FILE: "{{.G_WEBUI_SERVER_NODE_MODULES_CHECKSUM_FILE}}"
          INCLUDE_PATTERNS: ["{{.SERVER_OUTPUT_DIR}}"]

  nodejs:
    internal: true
    vars:
      NODEJS_ARCH: "{{ if eq ARCH \"arm64\" }}arm64{{ else }}x64{{ end }}"
      NODEJS_VERSION_BASE_URL: "https://nodejs.org/dist/{{.NODEJS_VERSION}}/"
      NODEJS_FILE_BASE_NAME:
        sh: >-
          curl --header "Cache-Control: no-cache, no-store" --silent "{{.NODEJS_VERSION_BASE_URL}}"
          | grep
          --only-matching
          --max-count 1
          "node-v[[:digit:]]\+\.[[:digit:]]\+\.[[:digit:]]\+-{{OS}}-{{.NODEJS_ARCH}}"
          | head --lines 1
    requires:
      vars: ["CHECKSUM_FILE", "NODEJS_VERSION", "OUTPUT_DIR"]
    deps: ["init"]
    cmds:
      - task: "download-and-extract-tar"
        vars:
          CHECKSUM_FILE: "{{.CHECKSUM_FILE}}"
          TAR_NAME: "{{.NODEJS_FILE_BASE_NAME}}.tar.xz"
          EXTRACTED_DIR_NAME: "{{.NODEJS_FILE_BASE_NAME}}"
          URL_PREFIX: "{{.NODEJS_VERSION_BASE_URL}}"
          OUTPUT_DIR: "{{.OUTPUT_DIR}}"

  package-tar:
    internal: true
    vars:
      VERSIONED_PACKAGE_NAME:
        sh: "echo clp-{{.FLAVOUR}}-$(arch)-v{{.G_PACKAGE_VERSION}}"
      OUTPUT_DIR: "{{.G_BUILD_DIR}}/{{.VERSIONED_PACKAGE_NAME}}"
      OUTPUT_FILE: "{{.OUTPUT_DIR}}.tar.gz"
    requires:
      vars: ["FLAVOUR", "STORAGE_ENGINE"]
    sources:
      - "{{.G_BUILD_DIR}}/package.md5"
      - "{{.TASKFILE}}"
    dir: "{{.G_BUILD_DIR}}"
    generates:
      - "{{.VERSIONED_PACKAGE_NAME}}.tar.gz"
    deps: ["package"]
    cmds:
      - "rm -rf '{{.OUTPUT_DIR}}' '{{.OUTPUT_FILE}}'"
      # NOTE: The trailing slash after the source is necessary so that rsync copies
      # `/parents/A` -> `/parents/B` rather than `/parents/A` -> `/parents/B/A`
      - "rsync --archive '{{.G_PACKAGE_BUILD_DIR}}/' '{{.OUTPUT_DIR}}'"
      # Set the storage engine for the package
      - task: "utils:misc:replace-text"
        vars:
          FILE_PATH: "{{.OUTPUT_DIR}}/lib/python3/site-packages/clp_py_utils/clp_config.py"
          SED_EXP: >-
            s/([[:space:]]*storage_engine: str = ")[^"]+"/\1{{.STORAGE_ENGINE}}"/
      - task: "utils:misc:replace-text"
        vars:
          FILE_PATH: "{{.OUTPUT_DIR}}/etc/clp-config.yml"
          SED_EXP: >-
            s/(\#[[:space:]]*storage_engine: ")[^"]+"/\1{{.STORAGE_ENGINE}}"/
      - >-
        tar czf '{{.OUTPUT_FILE}}'
        --directory '{{.G_BUILD_DIR}}'
        --dereference '{{.VERSIONED_PACKAGE_NAME}}'

  package-venv:
    internal: true
    vars:
      CHECKSUM_FILE: "{{.G_BUILD_DIR}}/{{.TASK}}.md5"
      OUTPUT_DIR: "{{.G_PACKAGE_VENV_DIR}}"
    sources:
      - "{{.ROOT_DIR}}/requirements.txt"
      - "{{.TASKFILE}}"
      - "/etc/os-release"
    generates: ["{{.CHECKSUM_FILE}}"]
    deps:
      - "init"
      - task: "utils:checksum:validate"
        vars:
          CHECKSUM_FILE: "{{.CHECKSUM_FILE}}"
          INCLUDE_PATTERNS: ["{{.OUTPUT_DIR}}"]
    cmds:
      - task: "utils:misc:create-venv"
        vars:
          LABEL: "package"
          OUTPUT_DIR: "{{.OUTPUT_DIR}}"
          REQUIREMENTS_FILE: "{{.ROOT_DIR}}/requirements.txt"
      # This command must be last
      - task: "utils:checksum:compute"
        vars:
          CHECKSUM_FILE: "{{.CHECKSUM_FILE}}"
          INCLUDE_PATTERNS: ["{{.OUTPUT_DIR}}"]

  python-component:
    internal: true
    label: "{{.COMPONENT}}"
    vars:
      PACKAGE:
        sh: "echo {{.COMPONENT}} | tr - _"
      VENV_DIR: "{{.G_BUILD_DIR}}/{{.COMPONENT}}/venv"
    requires:
      vars: ["COMPONENT"]
    sources:
      - "{{.G_BUILD_DIR}}/{{.COMPONENT}}_venv.md5"
      - "{{.PACKAGE}}/**/*"
      - "{{.ROOT_DIR}}/requirements.txt"
      - "{{.TASKFILE}}"
      - "/etc/os-release"
      - "pyproject.toml"
    dir: "components/{{.COMPONENT}}"
    generates:
      - "dist/*.whl"
    deps:
      - task: "component-venv"
        vars:
          COMPONENT: "{{.COMPONENT}}"
          OUTPUT_DIR: "{{.VENV_DIR}}"
    cmds:
      - task: "clean-python-component"
        vars:
          COMPONENT: "{{.COMPONENT}}"
      - |-
        . "{{.VENV_DIR}}/bin/activate"
        poetry build --format wheel

  component-venv:
    internal: true
    label: "{{.COMPONENT}}-venv"
    vars:
      CHECKSUM_FILE: "{{.G_BUILD_DIR}}/{{.COMPONENT}}-venv.md5"
    requires:
      vars: ["COMPONENT", "OUTPUT_DIR"]
    sources:
      - "{{.ROOT_DIR}}/requirements.txt"
      - "{{.TASKFILE}}"
      - "/etc/os-release"
      - "pyproject.toml"
    dir: "components/{{.COMPONENT}}"
    generates: ["{{.CHECKSUM_FILE}}"]
    deps:
      - "init"
      - task: "utils:checksum:validate"
        vars:
          CHECKSUM_FILE: "{{.CHECKSUM_FILE}}"
          INCLUDE_PATTERNS: ["{{.OUTPUT_DIR}}"]
    cmds:
      - task: "utils:misc:create-venv"
        vars:
          LABEL: "{{.COMPONENT}}"
          OUTPUT_DIR: "{{.OUTPUT_DIR}}"
          REQUIREMENTS_FILE: "{{.ROOT_DIR}}/requirements.txt"
      # This command must be last
      - task: "utils:checksum:compute"
        vars:
          CHECKSUM_FILE: "{{.CHECKSUM_FILE}}"
          INCLUDE_PATTERNS: ["{{.OUTPUT_DIR}}"]
  clean-python-component:
    internal: true
    label: "clean-{{.COMPONENT}}"
    requires:
      vars: ["COMPONENT"]
    dir: "components/{{.COMPONENT}}"
    cmds:
      - "rm -rf dist"

  init:
    internal: true
    silent: true
    run: "once"
    cmd: "mkdir -p '{{.G_BUILD_DIR}}'"
